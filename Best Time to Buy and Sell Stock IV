class Solution {
    public static int f(int ind, int buy, int cap, int[]prices, int[][][]dp){
        if(ind == prices.length || cap ==0) return 0;
        if(dp[ind][buy][cap]!=-1) return dp[ind][buy][cap];
        if(buy == 1){
            return dp[ind][buy][cap] = Math.max(-prices[ind]+f(ind+1,0,cap,prices,dp),0+f(ind+1,1,cap,prices,dp));
        }
        else{
            return dp[ind][buy][cap] = Math.max(prices[ind]+f(ind+1,1,cap-1,prices,dp),0+f(ind+1,0,cap,prices,dp));
        }
    }
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][k+1];
        for(int[][] rows:dp){
            for(int[] row:rows) Arrays.fill(row,-1);
        }
        return f(0,1,k,prices,dp);
    }
}




class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n+1][2][k+1];
        for(int ind = 0;ind<n;ind++){
            for(int buy = 0;buy<=1;buy++) dp[ind][buy][0] = 0;
        }
        for(int buy=0;buy<=1;buy++){
            for(int cap=0;cap<=k;cap++) dp[n][buy][cap] = 0;
        }
        for(int ind = n-1;ind>=0;ind--){
            for(int buy=0;buy<=1;buy++){
                for(int cap=1;cap<=k;cap++){
                    if(buy == 1){
                    dp[ind][buy][cap] = Math.max(-prices[ind]+dp[ind+1][0][cap],0+dp[ind+1][1][cap]);
                }
                else{
                    dp[ind][buy][cap] = Math.max(prices[ind]+dp[ind+1][1][cap-1],0+dp[ind+1][0][cap]);
                }
                }
            }
        }
        return dp[0][1][k];
    }
}
